# Deploy the stack before running these samples

# synonymous commands - container is optional/assumed, but best practice is to include it
docker container exec -it $(docker ps -lq -f name=phpworld_php-cli) bash
docker exec -it $(docker ps -lq -f name=phpworld_php-cli) bash

# show php is working from /var/www/html/
container> php command-line.php

# synonymous commands - container is optional/assumed, but best practice is to include it
docker container run --rm --interactive --tty --volume $PWD:/app composer install
docker run --rm --interactive --tty --volume $PWD:/app composer install

docker container cp sample.txt $(docker ps -lq -f name=phpworld_php-cli):/var/www/html/sample.txt
#show file is present in the container
docker exec -it $(docker ps -lq -f name=phpworld_php-cli) ls /var/www/html

# Ensure ~/Docker\ Volumes/phpworld/ folder exists, and contains a composer.json file
ls ~/Docker\ Volumes/phpworld/

docker volume create phpworld --opt type=none --opt device=~/Docker\ Volumes/phpworld/ \
	--opt o=bind --label "com.envisageinternational.description=phpworld Files"

docker volume ls -f name=phpworld
docker volume inspect phpworld

# Run the same command as before, but now with the named volume being used in the container
docker container run --rm --interactive --tty --volume phpworld:/app composer install

# See composer.lock and vendor directory now present
ls ~/Docker\ Volumes/phpworld/